server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            #/user-service/** 로 들어온 내용을 /**로 요청하겠다는 의미
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
              - Path=/order-service/**

        - id : first-service
#          uri : http://localhost:8081/
          uri: lb://MY-FIRST-SERVICE
          # lb:// => euraka discovery에 MY-FIRST-SERVICE라는 key로 운영중인 서버목록을 가져와서
          # 라운드 로빈 방식으로 한번씩 request를 분기쳐서 보내준다 (load balance)
          predicates:
            - Path=/first-service/**
            # http://localhost:8000/first-service/** 를 부르면
            # http://localhost:8081/first-service/** 가 호출된다
          filters:
            - AddRequestHeader=first-request, first-request-header2
            - AddResponseHeader=first-response, first-response-header2
            - AddResponseHeader=first-response2, first-response-header22
            - CustomFilter

        - id: second-service
#          uri: http://localhost:8082/
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
            - AddRequestHeader=second-request, second-request-header2
            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there
                preLogger: true
                postLogger: true

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh

#token:
#  secret: user_token




# yml에서 -의 의미 : LIST를 의미한다.
#
#  - "string1"
#  - "string2"
#In JSON:
#
#  ["string1", "string2"]
#They can also contain sets of key-value pairs:
#
#  - item1key1: "string1"
#    item1key2: "string2"
#  - item2key1: "string3"
#    item2key2: "string4"
#In JSON:
#
#  [{
#    item1key1: "string1",
#    item1key2: "string2"
#  },{
#    item2key1: "string3",
#    item2key2: "string4"
#  }]